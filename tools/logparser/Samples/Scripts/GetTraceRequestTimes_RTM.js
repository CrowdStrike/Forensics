/*

This script parses an Event Trace binary log (.etl file) generated by an IIS tracing session
 (on Windows Server 2003 RTM), and returns the total time taken by each request.

To start an IIS tracing session, use the 'logman start' shell command, specifying the path to a 
 'provider file' containing the names or GUID's of the desired IIS Tracing Providers.

*/



// Get arguments

var szArgs = WScript.Arguments;
if(szArgs.length<1 || szArgs.length>2)
{
	PrintUsage();
	WScript.Quit(-2);
}

var szTraceFilename=szArgs(0); 

var nThreshold = 0;
if(szArgs.length>1)
 nThreshold = parseInt(szArgs(1));


// Execute query

var myLogQuery = new ActiveXObject("MSUtil.LogQuery");
var myETWInput = new ActiveXObject("MSUtil.LogQuery.ETWInputFormat");
myETWInput.fMode = "full";

var szQuery = "SELECT RequestObj, TO_STRING(RequestId) AS RequestIdStr, Timestamp, EventNumber, Url, EventName, EventTypeName FROM " + szTraceFilename + " WHERE (EventName = 'W3Server' AND (EventTypeName = 'End')) OR (EventName = 'HttpRequest' AND (EventTypeName = 'Parse' OR EventTypeName = 'Deliver')) ";

var recordSet = myLogQuery.Execute(szQuery, myETWInput);


// Dump requests

var requestObjTable = new ActiveXObject("Scripting.Dictionary");
var requestIdTable = new ActiveXObject("Scripting.Dictionary");

while(!recordSet.atEnd())
{
	//Get record
	var record = recordSet.getRecord();
	var strEventName = record.getValue("EventName");
	var strEventTypeName = record.getValue("EventTypeName");

	if(strEventName == "HttpRequest")
	{
		var requestObj = record.getValue("RequestObj");
		
		if(strEventTypeName == "Parse")
		{
			//Check if we already have this Request Obj
			if(requestObjTable.Exists(requestObj))
			{
				//Remove it
				requestObjTable.Remove(requestObj);
			}

			//Add to table
			requestObjTable.Add(requestObj, record);
		}
		else if(strEventTypeName == "Deliver")
		{
			var requestId = record.getValue("RequestIdStr");

			//Check if we already have this Request Id
			if(requestIdTable.Exists(requestId))
			{
				//Remove it
				requestIdTable.Remove(requestId);
			}

			//Check if we have the Request Obj in table
			if(requestObjTable.Exists(requestObj))
			{
				//Add to table
				requestIdTable.Add(requestId, new Array(requestObjTable.Item(requestObj), record));

				//Forget about this Request Obj
				requestObjTable.Remove(requestObj);
			}
		}
	}
	else if(strEventName == "W3Server")
	{
		var requestId = record.getValue("RequestIdStr");

		if(strEventTypeName == "End")
		{
			//Check if we have this in the table
			if(requestIdTable.Exists(requestId))
			{
				if(typeof(requestIdTable.Item(requestId)) == "object")
				{
					//Dump it
					DumpRequest(requestIdTable.Item(requestId)[0], requestIdTable.Item(requestId)[1], record);
				}

				//Remove it
				requestIdTable.Remove(requestId);
			}		
		}
	 }
	
	recordSet.moveNext();
}

recordSet.close();


//END

function DumpRequest(record0, record1, record2)
{
	var nTimeElapsed = new Date(record2.getValue("Timestamp")).valueOf() - new Date(record0.getValue("Timestamp")).valueOf();

	if(nTimeElapsed >= nThreshold)
	{
		WScript.Echo(nTimeElapsed + ": " + record0.getValue("Url") + " (RequestId=" + record2.getValue("RequestIdStr") + ", start at event #" + record0.getValue("EventNumber") + ")");
	}
}

function PrintUsage()
{
	WScript.Echo("Usage: GetTraceRequestTimes_RTM <trace_filename> [ <threshold_msecs> ]");
	WScript.Echo("\r\nExample: GetTraceRequestTimes_RTM myTrace.etl 4000 \r\n\r\n");
}